generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}
//x
model Food {
  id              Int           @id @default(autoincrement())
  name            String        @db.VarChar(100)
  type            String        @db.VarChar(100)
  expiration_date DateTime      @db.Date
  istakeway       Boolean       @db.Bit(1)
  isavailable     Boolean       @db.Bit(1)
  kitchenId       Int
  food_offererId  Int?
  allergens       Allergen[]
  Food_offerer    Food_offerer? @relation(fields: [food_offererId], references: [id])
  kitchen_type    Kitchen       @relation(fields: [kitchenId], references: [id])

  @@map("foods")
}


//x
model Kitchen {
  id        Int         @id @default(autoincrement())
  name      String      @db.VarChar(50)
  Food      Food[]
  Foodsaver Foodsaver[]
  Member    Member[]

  @@map("kitchens")
}
//x
model Allergen {
  id          Int        @id @default(autoincrement())
  name        String     @db.VarChar(50)
  foodId      Int?
  foodsaverId Int?
  memberId    Int?
  Food        Food?      @relation(fields: [foodId], references: [id])
  Foodsaver   Foodsaver? @relation(fields: [foodsaverId], references: [id])
  Member      Member?    @relation(fields: [memberId], references: [id])

  @@map("allergens")
}
//x
model Food_offerer {
  id        Int    @id @default(autoincrement())
  name      String @db.VarChar(100)
  zipcode   Int
  locality  String @db.VarChar(100)
  address   String @db.VarChar(100)
  latitude  Float
  longitude Float
  email     String @db.VarChar(250)
  password  String @db.VarChar(500)
  phone     String @db.VarChar(12)
  roleId    Int
  role      Role   @relation(fields: [roleId], references: [id])
  food      Food[]

  @@map("food_offerers")
}
//x
model Charity {
  id        Int      @id @default(autoincrement())
  email     String   @db.VarChar(250)
  password  String   @db.VarChar(500)
  phone     String   @db.VarChar(12)
  name      String   @db.VarChar(100)
  zipcode   Int
  locality  String   @db.VarChar(100)
  address   String   @db.VarChar(100)
  latitude  Float
  longitude Float
  roleId    Int
  role      Role     @relation(fields: [roleId], references: [id])
  members   Member[]

  @@map("charities")
}

model Member {
  id           Int        @id @default(autoincrement())
  name         String     @db.VarChar(100)
  phone        String     @db.VarChar(12)
  locality     String     @db.VarChar(100)
  birthyear    Int
  kitchenId    Int
  charityId    Int?
  allergens    Allergen[]
  Charity      Charity?   @relation(fields: [charityId], references: [id])
  kitchen_type Kitchen    @relation(fields: [kitchenId], references: [id])

  @@map("members")
}
//x
model Foodsaver {
  id           Int        @id @default(autoincrement())
  name         String     @db.VarChar(100)
  email        String     @db.VarChar(250)
  password     String     @db.VarChar(500)
  phone        String     @db.VarChar(12)
  locality     String     @db.VarChar(100)
  birthyear    Int
  kitchenId    Int
  roleId       Int
  latitude     Float
  longitude    Float
  allergens    Allergen[]
  kitchen_type Kitchen    @relation(fields: [kitchenId], references: [id])
  role         Role       @relation(fields: [roleId], references: [id])

  @@map("foodsavers")
}
//x
model Role {
  id           Int            @id @default(autoincrement())
  name         String         @db.VarChar(50)
  Charity      Charity[]
  Food_offerer Food_offerer[]
  Foodsaver    Foodsaver[]

  // 1 -> Charity, 2 -> Food_offerer, 3 -> Foodsaver

  @@map("roles")
}
